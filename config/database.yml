# Database configuration with automatic SQLite/PostgreSQL switching
# Local development/test: SQLite
# Railway production: PostgreSQL (via DATABASE_URL)

default: &default
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  timeout: 5000

development:
  <<: *default
  adapter: sqlite3
  database: storage/development.sqlite3

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  adapter: sqlite3
  database: storage/test.sqlite3

# Production configuration with automatic PostgreSQL/SQLite switching
production:
  <% if ENV['DATABASE_URL'] %>
  # PostgreSQL configuration (Railway)
  primary:
    url: <%= ENV['DATABASE_URL'] %>
    pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  cache:
    url: <%= ENV['DATABASE_URL'] %>
    pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
    migrations_paths: db/cache_migrate
    schema_search_path: "cache"
  queue:
    url: <%= ENV['DATABASE_URL'] %>
    pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
    migrations_paths: db/queue_migrate
    schema_search_path: "queue"
  cable:
    url: <%= ENV['DATABASE_URL'] %>
    pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
    migrations_paths: db/cable_migrate
    schema_search_path: "cable"
  <% else %>
  # SQLite configuration (fallback)
  primary:
    <<: *default
    adapter: sqlite3
    database: /rails/storage/production.sqlite3
  cache:
    <<: *default
    adapter: sqlite3
    database: /rails/storage/production_cache.sqlite3
    migrations_paths: db/cache_migrate
  queue:
    <<: *default
    adapter: sqlite3
    database: /rails/storage/production_queue.sqlite3
    migrations_paths: db/queue_migrate
  cable:
    <<: *default
    adapter: sqlite3
    database: /rails/storage/production_cable.sqlite3
    migrations_paths: db/cable_migrate
  <% end %>
